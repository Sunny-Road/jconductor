
drop view if exists v_id;
drop view  if exists v_store_use;

drop view  if exists v_store_alloc_size;
drop view  if exists v_store_total_size;
drop view  if exists v_store_free_size;
drop view  if exists v_tray_alloc_size;
drop view  if exists v_tray_total_size;
drop view  if exists v_tray_free_size;
drop view  if exists v_primary_count;
drop view  if exists v_primary_s5store_id;
drop table  if exists t_volume;
drop table  if exists t_replica;
drop table  if exists t_quotaset;
drop table  if exists t_tenant;
drop table  if exists t_nic;
drop table  if exists t_tray;
drop table  if exists t_task_journal;
drop table  if exists t_seq_gen;
drop table  if exists t_s5store;
--'auth' column of 'tenant' describes access permission level of current tenant, 0 indicates normal user, 1 indicates administrator, -1 invalid tenant
-- car id from 0 ~ 63 is reserved for special usage, and will not be set to rge.
-- 
create table t_tenant(
	id integer primary key not null, 
	car_id integer not null, 
	name varchar(96) unique not null, 
	pass_wd varchar(256) not null, 
	auth int not null, 
	size bigint not null, 
	iops int not null, 
	cbs int not null, 
	bw int not null);


insert into t_tenant(id, car_id, name, pass_wd, auth, size, iops, cbs, bw) values(0, 0, 'tenant_default', '123456', -1, 0, 0, 0, 0);
insert into t_tenant(id, car_id, name, pass_wd, auth, size, iops, cbs, bw) values(1, 0, 'system_sp_tenant', '123456', -1, 0, 0, 0, 0);

--init administrator (id for administrator starts from 32 to 63)
insert into t_tenant(id, car_id, name, pass_wd, auth, size, iops, cbs, bw) values(32, -1, 'admin', '123456', 1, 0, 0, 0, 0);

create table t_quotaset(
	id integer primary key not null, 
	car_id integer not null, 
	name varchar(96) not null, 
	iops int not null, 
	cbs int not null, 
	bw int not null, 
	tenant_id integer not null, 
	foreign key (tenant_id) references t_tenant(id));

insert into t_quotaset(id, car_id, name, iops, cbs, bw, tenant_id) values(65, 1, 'quotaset_default', 0, 0, 0, 0);

create table t_s5store(
	id integer primary key, 
	name varchar(96) , 
	sn varchar(128) , 
	model varchar(128) , 
	mngt_ip varchar(32) unique not null,
	status varchar(16) not null);


--'access' describes access permission property of volume, 1 ---'00 01' owner read-only, 3 --- '00 11' owner read-write, 5 --- '01 01' all read, 7 --- '01 11' all-read owner-write,
--15 --- '11 11' all read-write
create table t_volume(
	id bigint primary key not null, 
	name varchar(96) not null, 
	size bigint not null, 
	iops int not null , 
	cbs int not null, 
	bw int not null, 
	tenant_id integer not null, 
	quotaset_id integer, 
	status varchar(16), 
	exposed boolean default(false),
	primary_rep_id integer,
	rep_count integer, 
	foreign key (tenant_id) references t_tenant(id)
	);


create view v_id as select id from t_tenant union all select id from t_volume union all select id from t_quotaset;



create table t_nic(
	id integer primary key AUTO_INCREMENT , 
	name varchar(96) not null, 
	ip_addr varchar(16) unique not null,
	mask varchar(16) not null, 
	mac varchar(18) unique not null, 
	seq_in_daemon integer not null, 
	status varchar(16) not null
	);

create table t_tray(
	uuid varchar(64) primary key ,  -- id generated by DB, as key
	device varchar(96) not null, 
	status varchar(16) not null, 
	raw_capacity long not null, 
	store_id integer not null,
	foreign key (store_id) references t_s5store(id));



create table t_task_journal(
	id integer primary key AUTO_INCREMENT , 
	type integer not null, 
	task blob, 
	time DATETIME not null default  CURRENT_TIMESTAMP
);

create table t_replica(
	id bigint primary key AUTO_INCREMENT , 
	volume_id bigint,
	store_id integer,
	tray_uuid	varchar(64),
	status varchar(16));

create view v_store_alloc_size as  select store_id, sum(size) as alloc_size from t_volume, t_replica where t_volume.id=t_replica.volume_id group by t_replica.store_id;
create view v_store_total_size as  select store_id, sum(t.raw_capacity) as total_size from t_tray as t where t.status=0 group by t.store_id;
create view v_store_free_size as select t.store_id, t.total_size, COALESCE(a.alloc_size,0) as alloc_size , t.total_size-COALESCE(a.alloc_size,0) as free_size 
 from v_store_total_size as t left join v_store_alloc_size as a on t.store_id=a.store_id order by free_size desc;
create view v_tray_alloc_size as select  t_replica.store_id as store_id, tray_uuid, sum(size) as alloc_size from t_volume, t_replica where t_volume.id = t_replica.volume_id group by t_replica.tray_uuid , t_replica.store_id;	
create view v_tray_total_size as select store_id, uuid as tray_uuid, raw_capacity as total_size, status from t_tray;
create view v_tray_free_size as select t.store_id as store_id, t.tray_uuid as tray_uuid, t.total_size as total_size,
 COALESCE(a.alloc_size,0) as alloc_size , t.total_size-COALESCE(a.alloc_size,0) as free_size, t.status as status from v_tray_total_size as t left join v_tray_alloc_size as a on t.store_id=a.store_id and t.tray_uuid=a.tray_uuid order by free_size desc;
-- select store_id, tray_uuid, max(free_size) from v_tray_free_size group by store_id;

--table used to generate sequence, val keep the latest available value
create table t_seq_gen(
	name varchar(32) primary key,
	val	integer not null);
insert into t_seq_gen values("vol_id", 66);
DROP FUNCTION IF EXISTS gen_volume_id;
DELIMITER $$
CREATE FUNCTION gen_volume_id() RETURNS BIGINT UNSIGNED
BEGIN
  DECLARE v BIGINT UNSIGNED;
  UPDATE t_seq_gen SET val=LAST_INSERT_ID(val+1) where name="vol_id";
  SELECT LAST_INSERT_ID() into v;
  RETURN v;
END;
$$
DELIMITER ;